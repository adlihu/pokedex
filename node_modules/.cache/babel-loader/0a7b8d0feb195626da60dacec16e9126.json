{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\React\\\\pokedex\\\\src\\\\components\\\\Evolution.js\";\nimport React, { Component } from 'react';\nexport class Evolution extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getEvol = data => {\n      let evolName = [];\n      evolName.push(data.chain.species.name); //Second Evolution\n\n      if (data.chain.evolves_to.length > 0) {\n        for (var i = 0; i < data.chain.evolves_to.length; i++) {\n          evolName.push(data.chain.evolves_to[i].species.name);\n        } //Third evolution\n\n\n        if (data.chain.evolves_to[0].evolves_to.length > 0) {\n          evolName.push(data.chain.evolves_to[0].evolves_to[0].species.name);\n        }\n      }\n\n      let gifUrl = [];\n\n      for (i = 0; i < evolName.length; i++) {\n        let test = \"https://projectpokemon.org/images/normal-sprite/\" + evolName[i] + \".gif\";\n        gifUrl.push(test);\n      }\n\n      const imageUrl = gifUrl.map((gifUrl, index) => React.createElement(\"button\", {\n        className: \"evolItems\",\n        key: index,\n        onClick: this.handle.bind(this, evolName[index]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: gifUrl,\n        alt: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        style: white,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, evolName[index].charAt(0).toUpperCase() + evolName[index].slice(1))));\n\n      if (evolName.length === 1) {\n        return React.createElement(\"p\", {\n          style: white,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        }, evolName[0].charAt(0).toUpperCase() + evolName[0].slice(1), \" has no evolutions.\");\n      }\n\n      return imageUrl;\n    };\n\n    this.handle = ar => {\n      this.props.searchPoke(ar);\n    };\n  }\n\n  getOneType() {\n    let pokemonType = this.props.data.pokemon.types;\n    pokemonType = pokemonType[pokemonType.length - 1].type.name;\n    return pokemonType;\n  }\n\n  render() {\n    if (this.props.data.isLoading) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: \"evolDesc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"sectionTitle\",\n      id: this.getOneType(),\n      style: {\n        color: \"white\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Evolution\"), React.createElement(\"div\", {\n      className: \"evolList\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.getEvol(this.props.data.evolutionChain)));\n  }\n\n}\nconst white = {\n  color: \"black\"\n};\nexport default Evolution;","map":{"version":3,"sources":["D:\\project\\React\\pokedex\\src\\components\\Evolution.js"],"names":["React","Component","Evolution","getEvol","data","evolName","push","chain","species","name","evolves_to","length","i","gifUrl","test","imageUrl","map","index","handle","bind","white","charAt","toUpperCase","slice","ar","props","searchPoke","getOneType","pokemonType","pokemon","types","type","render","isLoading","color","evolutionChain"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAAA;AAAA;;AAAA,SACrCE,OADqC,GAC1BC,IAAD,IAAU;AAChB,UAAIC,QAAQ,GAAG,EAAf;AACAA,MAAAA,QAAQ,CAACC,IAAT,CAAcF,IAAI,CAACG,KAAL,CAAWC,OAAX,CAAmBC,IAAjC,EAFgB,CAIhB;;AACA,UAAIL,IAAI,CAACG,KAAL,CAAWG,UAAX,CAAsBC,MAAtB,GAA+B,CAAnC,EAAqC;AACjC,aAAK,IAAIC,CAAC,GAAC,CAAX,EAAaA,CAAC,GAACR,IAAI,CAACG,KAAL,CAAWG,UAAX,CAAsBC,MAArC,EAA4CC,CAAC,EAA7C,EAAgD;AAC5CP,UAAAA,QAAQ,CAACC,IAAT,CAAcF,IAAI,CAACG,KAAL,CAAWG,UAAX,CAAsBE,CAAtB,EAAyBJ,OAAzB,CAAiCC,IAA/C;AACH,SAHgC,CAIjC;;;AACA,YAAIL,IAAI,CAACG,KAAL,CAAWG,UAAX,CAAsB,CAAtB,EAAyBA,UAAzB,CAAoCC,MAApC,GAA6C,CAAjD,EAAmD;AAC/CN,UAAAA,QAAQ,CAACC,IAAT,CAAcF,IAAI,CAACG,KAAL,CAAWG,UAAX,CAAsB,CAAtB,EAAyBA,UAAzB,CAAoC,CAApC,EAAuCF,OAAvC,CAA+CC,IAA7D;AACH;AACJ;;AACD,UAAII,MAAM,GAAG,EAAb;;AACA,WAAKD,CAAC,GAAC,CAAP,EAASA,CAAC,GAACP,QAAQ,CAACM,MAApB,EAA2BC,CAAC,EAA5B,EAA+B;AAC3B,YAAIE,IAAI,GAAG,qDAAqDT,QAAQ,CAACO,CAAD,CAA7D,GAAmE,MAA9E;AACAC,QAAAA,MAAM,CAACP,IAAP,CAAYQ,IAAZ;AACH;;AACD,YAAMC,QAAQ,GAAGF,MAAM,CAACG,GAAP,CAAW,CAACH,MAAD,EAASI,KAAT,KACxB;AAAQ,QAAA,SAAS,EAAC,WAAlB;AAA8B,QAAA,GAAG,EAAEA,KAAnC;AAA0C,QAAA,OAAO,EAAE,KAAKC,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,EAAsBd,QAAQ,CAACY,KAAD,CAA9B,CAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,GAAG,EAAEJ,MAAV;AAAkB,QAAA,GAAG,EAAC,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAG,QAAA,KAAK,EAAEO,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAkBf,QAAQ,CAACY,KAAD,CAAR,CAAgBI,MAAhB,CAAuB,CAAvB,EAA0BC,WAA1B,KAA0CjB,QAAQ,CAACY,KAAD,CAAR,CAAgBM,KAAhB,CAAsB,CAAtB,CAA5D,CAFJ,CADa,CAAjB;;AAOA,UAAIlB,QAAQ,CAACM,MAAT,KAAoB,CAAxB,EAA0B;AACtB,eAAO;AAAG,UAAA,KAAK,EAAES,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAkBf,QAAQ,CAAC,CAAD,CAAR,CAAYgB,MAAZ,CAAmB,CAAnB,EAAsBC,WAAtB,KAAsCjB,QAAQ,CAAC,CAAD,CAAR,CAAYkB,KAAZ,CAAkB,CAAlB,CAAxD,wBAAP;AACH;;AACD,aAAOR,QAAP;AACH,KA/BoC;;AAAA,SAiCrCG,MAjCqC,GAiC3BM,EAAD,IAAO;AACZ,WAAKC,KAAL,CAAWC,UAAX,CAAsBF,EAAtB;AACH,KAnCoC;AAAA;;AAqCrCG,EAAAA,UAAU,GAAE;AACR,QAAIC,WAAW,GAAG,KAAKH,KAAL,CAAWrB,IAAX,CAAgByB,OAAhB,CAAwBC,KAA1C;AACAF,IAAAA,WAAW,GAAGA,WAAW,CAACA,WAAW,CAACjB,MAAZ,GAAmB,CAApB,CAAX,CAAkCoB,IAAlC,CAAuCtB,IAArD;AACA,WAAOmB,WAAP;AACH;;AAEDI,EAAAA,MAAM,GAAG;AACL,QAAI,KAAKP,KAAL,CAAWrB,IAAX,CAAgB6B,SAApB,EAA+B;AAC3B,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;;AACD,WACI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAI,MAAA,SAAS,EAAC,cAAd;AAA6B,MAAA,EAAE,EAAE,KAAKN,UAAL,EAAjC;AAAoD,MAAA,KAAK,EAAE;AAACO,QAAAA,KAAK,EAAC;AAAP,OAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2B,KAAK/B,OAAL,CAAa,KAAKsB,KAAL,CAAWrB,IAAX,CAAgB+B,cAA7B,CAA3B,CAFJ,CADJ;AAMH;;AArDoC;AAwDzC,MAAMf,KAAK,GAAG;AACVc,EAAAA,KAAK,EAAC;AADI,CAAd;AAIA,eAAehC,SAAf","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport class Evolution extends Component {\r\n    getEvol = (data) => {\r\n        let evolName = [];\r\n        evolName.push(data.chain.species.name);\r\n\r\n        //Second Evolution\r\n        if (data.chain.evolves_to.length > 0){\r\n            for (var i=0;i<data.chain.evolves_to.length;i++){\r\n                evolName.push(data.chain.evolves_to[i].species.name);\r\n            }\r\n            //Third evolution\r\n            if (data.chain.evolves_to[0].evolves_to.length > 0){\r\n                evolName.push(data.chain.evolves_to[0].evolves_to[0].species.name);\r\n            }\r\n        }\r\n        let gifUrl = [];\r\n        for (i=0;i<evolName.length;i++){\r\n            let test = \"https://projectpokemon.org/images/normal-sprite/\" + evolName[i] + \".gif\";\r\n            gifUrl.push(test);\r\n        }\r\n        const imageUrl = gifUrl.map((gifUrl, index) => \r\n            <button className=\"evolItems\" key={index} onClick={this.handle.bind(this,evolName[index])}>\r\n                <img src={gifUrl} alt=\"\"></img>\r\n                <p style={white}>{evolName[index].charAt(0).toUpperCase() + evolName[index].slice(1)}</p>\r\n            </button>\r\n        );\r\n        \r\n        if (evolName.length === 1){\r\n            return <p style={white}>{evolName[0].charAt(0).toUpperCase() + evolName[0].slice(1)} has no evolutions.</p>\r\n        }\r\n        return imageUrl;\r\n    }\r\n\r\n    handle = (ar) =>{\r\n        this.props.searchPoke(ar);\r\n    }\r\n\r\n    getOneType(){\r\n        let pokemonType = this.props.data.pokemon.types;\r\n        pokemonType = pokemonType[pokemonType.length-1].type.name;\r\n        return pokemonType;\r\n    }\r\n\r\n    render() {\r\n        if (this.props.data.isLoading) {\r\n            return <div></div>\r\n        }\r\n        return (\r\n            <div className=\"evolDesc\">\r\n                <h1 className=\"sectionTitle\" id={this.getOneType()} style={{color:\"white\"}}>Evolution</h1>\r\n                <div className=\"evolList\">{this.getEvol(this.props.data.evolutionChain)}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst white = {\r\n    color:\"black\",\r\n}\r\n\r\nexport default Evolution\r\n"]},"metadata":{},"sourceType":"module"}